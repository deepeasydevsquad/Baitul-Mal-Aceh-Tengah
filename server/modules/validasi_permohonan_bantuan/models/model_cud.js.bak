const {
  sequelize,
  Realisasi_permohonan,
  Validasi_syarat_permohonan,
} = require("../../../models");
const Model_r = require("./model_r");
const { writeLog } = require("../../../helper/writeLogHelper");
const { sendWhatsApp } = require("../../../helper/waSenderHelper");
const { convertToRP } = require("../../../helper/currencyHelper");
const path = require("path");
const fs = require("fs");
const moment = require("moment");

class Model_cud {
  constructor(req) {
    this.req = req;
  }

  async initialize() {
    this.t = await sequelize.transaction();
    this.state = true;
  }

  // ========================================
  // 1. EDIT FILE
  // ========================================
  async edit_file() {
    await this.initialize();
    const myDate = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
    const body = this.req.body;
    const file = this.req.body.file; // Dari multer

    try {
      // Cari data validasi syarat
      const dataValidasi = await Validasi_syarat_permohonan.findOne({
        where: {
          realisasi_permohonan_id: body.id,
          id: body.validasi_id,
        },
      });

      // Hapus file lama dari storage
      if (dataValidasi.path) {
        const oldFilePath = path.join(
          __dirname,
          "../../../uploads/dokumen/permohonan_bantuan/",
          path.basename(dataValidasi.path)
        );
        if (fs.existsSync(oldFilePath)) {
          fs.unlinkSync(oldFilePath);
        }
      }

      // Update dengan file baru
      await dataValidasi.update(
        {
          file_name: file[0].basename,
          path: file[0].path,
          status: "process", // Reset status jadi process lagi
          alasan_penolakan: null, // Reset alasan penolakan
          updatedAt: myDate,
        },
        { transaction: this.t }
      );

      // Get info untuk log
      const model_r = new Model_r(this.req);
      const info_realisasi = await model_r.info_realisasi(body.id);
      const info_permohonan = await model_r.info_permohonan(
        info_realisasi.permohonan_id
      );
      const info_member = await model_r.info_member(info_permohonan.member_id);

      this.message = `Memperbarui file syarat permohonan untuk ${info_member.fullname} dengan file baru: ${file.basename}`;
    } catch (error) {
      this.state = false;
      console.error("Error editing file:", error);
    }
  }

  // ========================================
  // 2. APPROVE BERKAS (per syarat)
  // ========================================
  async approve_berkas() {
    await this.initialize();
    const myDate = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
    const body = this.req.body;

    try {
      // Update status berkas jadi approve
      const dataValidasi = await Validasi_syarat_permohonan.findByPk(
        body.validasi_id
      );

      await dataValidasi.update(
        {
          status: "approve",
          alasan_penolakan: null,
          updatedAt: myDate,
        },
        { transaction: this.t }
      );

      // Get info untuk log
      const model_r = new Model_r(this.req);
      const info_realisasi = await model_r.info_realisasi(body.id);
      const info_permohonan = await model_r.info_permohonan(
        info_realisasi.permohonan_id
      );
      const info_kegiatan = await model_r.info_kegiatan(
        info_permohonan.kegiatan_id
      );
      const info_member = await model_r.info_member(info_permohonan.member_id);

      this.message = `Menyetujui berkas permohonan ${dataValidasi.file_name
        .split("_")
        .filter((item) => item.trim() !== "")
        .join(" ")} untuk ${info_member.fullname} - Kegiatan: ${
        info_kegiatan.nama_kegiatan
      }`;
    } catch (error) {
      this.state = false;
      console.error("Error approve berkas:", error);
    }
  }

  // ========================================
  // 3. REJECT BERKAS (per syarat)
  // ========================================
  async reject_berkas() {
    await this.initialize();
    const myDate = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
    const body = this.req.body;

    try {
      // Update status berkas jadi reject
      const dataValidasi = await Validasi_syarat_permohonan.findByPk(
        body.validasi_id
      );

      await dataValidasi.update(
        {
          status: "reject",
          alasan_penolakan: body.alasan_penolakan,
          updatedAt: myDate,
        },
        { transaction: this.t }
      );

      // Get info untuk log
      const model_r = new Model_r(this.req);
      const info_realisasi = await model_r.info_realisasi(body.id);
      const info_permohonan = await model_r.info_permohonan(
        info_realisasi.permohonan_id
      );
      const info_kegiatan = await model_r.info_kegiatan(
        info_permohonan.kegiatan_id
      );
      const info_member = await model_r.info_member(info_permohonan.member_id);

      this.message = `Menolak berkas ${dataValidasi.file_name
        .split("_")
        .filter((item) => item.trim() !== "")
        .join(" ")} untuk ${info_member.fullname} - Kegiatan: ${
        info_kegiatan.nama_kegiatan
      }
      ${body.alasan_penolakan ? ` - Alasan: ${body.alasan_penolakan}` : ""}
      } - Alasan: ${body.alasan_penolakan}`;
    } catch (error) {
      this.state = false;
      console.error("Error reject berkas:", error);
    }
  }

  // ========================================
  // 4. TOLAK PERMOHONAN
  // ========================================
  async reject_permohonan() {
    await this.initialize();
    const myDate = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
    const body = this.req.body;

    try {
      // Get info permohonan
      const model_r = new Model_r(this.req);
      const info_realisasi = await model_r.info_realisasi(body.id);
      const info_permohonan = await model_r.info_permohonan(
        info_realisasi.permohonan_id
      );
      const info_kegiatan = await model_r.info_kegiatan(
        info_permohonan.kegiatan_id
      );
      const info_member = await model_r.info_member(info_permohonan.member_id);

      // Update status realisasi jadi reject_berkas
      await Realisasi_permohonan.update(
        {
          status: "reject_berkas",
          updatedAt: myDate,
        },
        {
          where: { id: body.id },
          transaction: this.t,
        }
      );

      // Jika send_wa = true, kirim WA
      if (body.send_wa) {
        const message = `Halo *${info_member.fullname}*,\n\nPermohonan bantuan Anda untuk kegiatan *"${info_kegiatan.nama_kegiatan}"* telah *DITOLAK*.\n\n*Alasan:*\n${body.alasan_penolakan}\n\nTerima kasih.`;

        console.log(`Sending WA to ${info_member.whatsapp_number}: ${message}`);
        await sendWhatsApp(info_member.whatsapp_number, message);
      }

      this.message = `Menolak permohonan bantuan ${
        info_member.fullname
      } - Kegiatan: ${info_kegiatan.nama_kegiatan}. Alasan: ${
        body.alasan_penolakan
      }${body.send_wa ? " (dengan notifikasi WA)" : ""}`;
    } catch (error) {
      this.state = false;
      console.error("Error reject permohonan:", error);
      throw error;
    }
  }

  // ========================================
  // 5. APPROVE PERMOHONAN
  // ========================================
  async approve_permohonan() {
    await this.initialize();
    const myDate = moment(new Date()).format("YYYY-MM-DD HH:mm:ss");
    const body = this.req.body;

    console.log("body", body);

    try {
      // Get info permohonan
      const model_r = new Model_r(this.req);
      const info_realisasi = await model_r.info_realisasi(body.id);
      const info_permohonan = await model_r.info_permohonan(
        info_realisasi.permohonan_id
      );
      const info_kegiatan = await model_r.info_kegiatan(
        info_permohonan.kegiatan_id
      );
      const info_member = await model_r.info_member(info_permohonan.member_id);

      // Update status realisasi jadi approve
      await Realisasi_permohonan.update(
        {
          status: "approve",
          biaya_disetujui: body.biaya_disetujui,
          updatedAt: myDate,
        },
        {
          where: { id: body.id },
          transaction: this.t,
        }
      );

      // Jika send_wa = true, kirim WA
      if (body.send_wa) {
        const message = `Halo *${
          info_member.fullname
        }*,\n\nPermohonan bantuan Anda untuk kegiatan *"${
          info_kegiatan.nama_kegiatan
        }"* telah *DISETUJUI* dengan jumlah bantuan *${await convertToRP(
          body.biaya_disetujui
        )}*.\n\nProses transfer akan diinformasikan selanjutnya.\n\n${
          body.catatan ? `Catatan: ${body.catatan}\n\n` : ""
        }Terima kasih.`;

        console.log(`Sending WA to ${info_member.whatsapp_number}: ${message}`);
        await sendWhatsApp(info_member.whatsapp_number, message);
      }

      this.message = `Menyetujui permohonan bantuan ${
        info_member.fullname
      } - Kegiatan: ${info_kegiatan.nama_kegiatan} dengan biaya Rp ${
        body.biaya_disetujui
      }${body.send_wa ? " (dengan notifikasi WA)" : ""}`;
    } catch (error) {
      this.state = false;
      console.error("Error approve permohonan:", error);
      throw error;
    }
  }

  // ========================================
  // RESPONSE HANDLER
  // ========================================
  async response() {
    if (this.state) {
      await writeLog(this.req, this.t, {
        msg: this.message,
      });
      await this.t.commit();
      return true;
    } else {
      await this.t.rollback();
      return false;
    }
  }
}

module.exports = Model_cud;
